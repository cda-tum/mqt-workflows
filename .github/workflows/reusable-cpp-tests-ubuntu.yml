name: üá® ‚Ä¢ Tests ‚Ä¢ ubuntu
on:
  workflow_call:
    inputs:
      runs-on:
        description: >
          The ubuntu runner image to use. Defaults to 'ubuntu-latest'.
          This can be any valid ubuntu runner image, such as 'ubuntu-22.04', 'ubuntu-24.04', or their ARM variants 'ubuntu-22.04-arm', 'ubuntu-24.04-arm'.
        default: "ubuntu-latest"
        type: string
      config:
        description: >
          The build type to use. Defaults to 'Release'.
          This can be any valid CMake build type, such as 'Debug' or 'Release'.
        default: "Release"
        type: string
      compiler:
        description: >
          The compiler to use. Defaults to 'gcc'.
          This can be 'gcc' or 'clang'.
          If 'gcc' is selected, this will use the default GCC compiler.
          If 'clang' is selected, this will use the default Clang compiler.
        default: "gcc"
        type: string
      cmake-args:
        description: >
          Additional arguments to pass to CMake. Defaults to an empty string.
          This can be any valid CMake argument, such as '-DBUILD_SHARED_LIBS=ON'.
        default: ""
        type: string
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.4"
        type: string

jobs:
  cpp-tests-ubuntu:
    name: üêß ${{ inputs.runs-on }} ${{ inputs.compiler }} ${{ inputs.config }}
    runs-on: ${{ inputs.runs-on }}
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
      # set up ccache for faster C++ builds
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          override_cache_key: c++-tests-${{ inputs.runs-on }}-${{ inputs.config }}-${{ inputs.compiler }}
      # set up mold as linker for faster C++ builds
      - name: Set up mold as linker
        uses: rui314/setup-mold@v1
      # make sure ninja is installed
      - name: Install Ninja
        run: pipx install ninja
      # configure CMake in the specified mode, optionally with additional arguments
      - name: Configure CMake
        run: |
          cmake_args="${{ inputs.cmake-args }}"
          if [ "${{ inputs.compiler }}" == "gcc" ]; then
            cmake_args="$cmake_args -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
          fi
          cmake -G Ninja -S . -B build -DCMAKE_BUILD_TYPE=${{ inputs.config }} $cmake_args
      # build the project in the specified mode
      - name: Build
        run: cmake --build build --config ${{ inputs.config }}
      # run the tests
      - name: Test
        run: ctest -C ${{ inputs.config }} --output-on-failure --test-dir build --repeat until-pass:3 --timeout 600
