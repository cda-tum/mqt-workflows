name: üêç ‚Ä¢ Tests
on:
  workflow_call:
    inputs:
      runs-on:
        description: "The platform to run the tests on (ubuntu-latest, macos-latest, windows-latest)"
        required: true
        type: string
      python-version:
        description: "The Python version to use"
        required: true
        type: string
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.0"
        type: string

jobs:
  python-tests:
    name: üêç ${{ inputs.python-version }} ${{ inputs.runs-on }}
    runs-on: ${{ inputs.runs-on }}
    env:
      FORCE_COLOR: 3
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up MSVC development environment (Windows only)
      - uses: ilammy/msvc-dev-cmd@v1
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
      # set up ccache for faster C++ builds
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          windows_compile_environment: msvc
          override_cache_key: python-tests-${{ inputs.runs-on }}-${{ inputs.python-version }}
      # set up mold as linker for faster C++ builds (Linux only)
      - name: Set up mold as linker (Linux only)
        uses: rui314/setup-mold@v1
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      # run the nox minimums session (assumes a nox session named "minimums" exists) with coverage
      - name: Test on üêç ${{ inputs.python-version }} with minimal versions
        run: uvx --python ${{ inputs.python-version }} nox -s minimums-${{ inputs.python-version }} --verbose -- --cov --cov-report=xml:coverage-${{ inputs.python-version }}-${{ inputs.runs-on }}.xml
      # run the nox tests session (assumes a nox session named "tests" exists) with coverage
      - name: Test on üêç ${{ inputs.python-version }}
        run: uvx --python ${{ inputs.python-version }} nox -s tests-${{ inputs.python-version }} --verbose -- --cov --cov-report=xml:coverage-${{ inputs.python-version }}-${{ inputs.runs-on }}.xml --cov-append
      # upload the report as an artifact to GitHub so that it can later be uploaded to Codecov
      - name: Upload coverage report for üêç ${{ inputs.python-version }} on ${{ inputs.runs-on }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ inputs.python-version }}-${{ inputs.runs-on }}
          path: coverage-*
