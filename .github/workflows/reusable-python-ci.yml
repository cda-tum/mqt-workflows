name: üêç ‚Ä¢ CI

on:
  workflow_call:
    inputs:
      skip-testing-latest-python:
        description: "Whether to skip testing on the latest Python version. This only has an effect if the Python tests are run individually."
        default: false
        type: boolean
      run-tests-individually:
        description: "Whether to run the Python tests individually or combined"
        default: false
        type: boolean
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.0"
        type: string

jobs:
  lint:
    name: üö® Lint
    uses: ./.github/workflows/reusable-python-linter.yml
    with:
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}

  dist:
    name: üì¶ Check
    runs-on: ubuntu-latest
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
      # set up mold as linker for faster C++ builds
      - name: Set up mold as linker
        uses: rui314/setup-mold@v1
      # run the build-and-inspect-python-package action (outputs supported Python versions)
      - uses: hynek/build-and-inspect-python-package@v2
        id: baipp
      # reduce the list of Python versions by one if the latest Python version is to be skipped
      - name: üêç Conditionally reduce the list of considered Python versions
        run: echo "supported-python-versions=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq -rc 'if ${{ inputs.skip-testing-latest-python }} then .[:-1] else . end')" >> $GITHUB_OUTPUT
        id: supported-python-versions
    outputs:
      python-versions: ${{ steps.supported-python-versions.outputs.supported-python-versions }}

  python-tests:
    if: ${{ !inputs.run-tests-individually }}
    name: üêç ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          [
            ubuntu-22.04,
            ubuntu-22.04-arm,
            ubuntu-24.04,
            ubuntu-24.04-arm,
            macos-13,
            macos-14,
            macos-15,
            windows-2022,
            windows-2025,
          ]
    uses: ./.github/workflows/reusable-python-tests.yml
    with:
      runs-on: ${{ matrix.runs-on }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}

  python-tests-individual:
    if: ${{ inputs.run-tests-individually }}
    needs: [dist]
    name: üêç ${{ matrix.session }} ${{ matrix.python-version }} ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          [
            ubuntu-22.04,
            ubuntu-22.04-arm,
            ubuntu-24.04,
            ubuntu-24.04-arm,
            macos-13,
            macos-14,
            macos-15,
            windows-2022,
            windows-2025,
          ]
        python-version: ${{ fromJson(needs.dist.outputs.python-versions) }}
        session: ["minimums", "tests"]
    uses: ./.github/workflows/reusable-python-tests-individual.yml
    with:
      runs-on: ${{ matrix.runs-on }}
      python-version: ${{ matrix.python-version }}
      session: ${{ matrix.session }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}

  python-coverage-upload:
    if: ${{ !inputs.run-tests-individually }}
    name: üìà
    needs: [python-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for the `actions/checkout` action
      id-token: write # Required for the `codecov/codecov-action` action
    steps:
      # check out the repository (mostly for the codecov config)
      - uses: actions/checkout@v4
      # download coverage reports from all jobs
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports
          merge-multiple: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          flags: python
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}

  python-coverage-upload-individual:
    if: ${{ inputs.run-tests-individually }}
    name: üìà
    needs: [python-tests-individual]
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for the `actions/checkout` action
      id-token: write # Required for the `codecov/codecov-action` action
    steps:
      # check out the repository (mostly for the codecov config)
      - uses: actions/checkout@v4
      # download coverage reports from all jobs
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports
          merge-multiple: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          flags: python
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
