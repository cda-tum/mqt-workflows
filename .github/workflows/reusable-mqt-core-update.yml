name: ⬆️ Update MQT Core
on:
  workflow_call:
    inputs:
      update-to-head:
        description: "Whether to update to the latest commit on the main branch or the latest release"
        default: false
        type: boolean
        required: false
jobs:
  update-mqt-core:
    name: ⬆️ Update MQT Core
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Parse the MQT Core version and the revision from the `cmake/ExternalDependencies.cmake` file.
      # The relevant portions of the file have the format:
      # ```cmake
      #   set(MQT_CORE_VERSION <major>.<minor>.<patch>\n
      #   # ...
      #   set(MQT_CORE_REV "<tag, branch or commit hash>"\n
      # ```
      # where `<major>.<minor>.<patch>` is the version and `<tag, branch or commit hash>` is the revision.
      - name: Parse MQT Core version and revision
        id: get-used-version
        run: |
          echo "Checking if cmake/ExternalDependencies.cmake exists..."
          ls -l cmake/ExternalDependencies.cmake || true
          echo "Attempting to parse version and revision..."
          version=$(sed -nE 's/set\(MQT_CORE_VERSION\s+([0-9]+\.[0-9]+\.[0-9]+)/\1/p' cmake/ExternalDependencies.cmake)
          echo "Parsed version: $version"
          revision=$(sed -nE 's/set\(MQT_CORE_REV\s+"([^"]+)"/\1/p' cmake/ExternalDependencies.cmake)
          echo "Parsed revision: $revision"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "revision=$revision" >> $GITHUB_OUTPUT
      # Query the latest tag of mqt-core via the GitHub API (using the GitHub token for authentication).
      - name: Get latest release of MQT Core
        id: get-latest-release
        run: |
          echo "Querying the latest release of MQT Core..."
          latest_release=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/cda-tum/mqt-core/releases/latest)
          tag=$(echo $latest_release | jq -r '.tag_name')
          latest_version=${tag#v}
          echo "latest_release=$latest_release"
          echo "tag=$tag"
          echo "latest_version=$latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
      # Query the commit SHA of the latest tag of mqt-core via the GitHub API (using the GitHub token for authentication).
      - name: Get the commit SHA of the latest tag of MQT Core
        id: get-latest-tag-sha
        run: |
          echo "Querying the tags of MQT Core..."
          tags=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/cda-tum/mqt-core/tags)
          echo "tags=$tags"
          latest_tag_sha=$(echo $tags | jq -r '.[0].commit.sha')
          echo "latest_tag_sha=$latest_tag_sha"
          echo "latest_tag_sha=$latest_tag_sha" >> $GITHUB_OUTPUT
      # Query the latest commit of the main branch of mqt-core via the GitHub API (using the GitHub token for authentication).
      - name: Get the latest commit of the main branch of MQT Core
        id: get-latest-commit
        run: |
          echo "Querying the latest commit of the main branch of MQT Core..."
          latest_commit=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/cda-tum/mqt-core/commits/main)
          latest_commit_sha=$(echo $latest_commit | jq -r '.sha')
          echo "latest_commit_sha=$latest_commit_sha"
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT
      # Install the `semver` tool for making semantic version comparisons.
      - name: Install semver
        run: |
          wget -O /usr/local/bin/semver \
          https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /usr/local/bin/semver
      # Compare the used version with the latest version based on SemVer.
      # Indicate to update MQT Core, whenever
      # - the user wants to update to the latest commit on the main branch and the used revision is different, or
      # - the latest version is newer than the used version, or
      # - the latest version is the same as the used version, but its tag has a different commit SHA than the used revision.
      - name: Compare versions
        id: compare-versions
        run: |
          if [ ${{ inputs.update-to-head }} = true ]; then
            if [ ${{ steps.get-used-version.outputs.revision }} != ${{ steps.get-latest-commit.outputs.latest_commit_sha }} ]; then
              update=true
            else
              update=false
            fi
          else
            if semver compare ${{ steps.get-used-version.outputs.version }} ${{ steps.get-latest-release.outputs.latest_version }} < 0; then
              update=true
            elif [ ${{ steps.get-used-version.outputs.version }} = ${{ steps.get-latest-release.outputs.latest_version }} ] && [ ${{ steps.get-used-version.outputs.revision }} != ${{ steps.get-latest-tag-sha.outputs.latest_tag_sha }} ]; then
              update=true
            else
              update=false
            fi
          fi
          echo "update=$update"
          echo "update=$update" >> $GITHUB_OUTPUT
      # If an update should be performed, properly set the new version and revision based on the update type.
      # If the user wants to update to the latest commit on the main branch, set the revision to the latest commit SHA,
      # and if the latest commit SHA is different from the latest tag SHA, use the semver tool to increment the patch
      # version. Otherwise, set the version to the latest version. If the user wants to update to the latest release,
      # set the version to the latest version and the revision to the latest tag SHA.
      - name: Determine new version and revision
        if: steps.compare-versions.outputs.update == 'true'
        id: determine-new-version-and-revision
        run: |
          if [ ${{ inputs.update-to-head }} = true ]; then
            if [ ${{ steps.get-latest-commit.outputs.latest_commit_sha }} != ${{ steps.get-latest-tag-sha.outputs.latest_tag_sha }} ]; then
              new_version=$(semver -i patch ${{ steps.get-used-version.outputs.version }})
            else
              new_version=${{ steps.get-latest-release.outputs.latest_version }}
            fi
            new_revision=${{ steps.get-latest-commit.outputs.latest_commit_sha }}
          else
            new_version=${{ steps.get-latest-release.outputs.latest_version }}
            new_revision=${{ steps.get-latest-tag-sha.outputs.latest_tag_sha }}
          fi
          echo "new_version=$new_version"
          echo "new_revision=$new_revision"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "new_revision=$new_revision" >> $GITHUB_OUTPUT
      # Update the MQT Core version and revision in the `cmake/ExternalDependencies.cmake` file.
      - name: Update MQT Core version and revision
        id: update-version
        if: steps.compare-versions.outputs.update == 'true'
        run: |
          sed -i 's/set(MQT_CORE_VERSION.*/set(MQT_CORE_VERSION ${{ steps.determine-new-version-and-revision.outputs.new_version }}/' cmake/ExternalDependencies.cmake
          sed -i 's/set(MQT_CORE_REV.*/set(MQT_CORE_REV "${{ steps.determine-new-version-and-revision.outputs.new_revision }}"/' cmake/ExternalDependencies.cmake
          git diff
      # Create a pull request to merge the changes into the main branch.
      - name: Create pull request
        id: create-pull-request
        if: steps.compare-versions.outputs.update == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          commit-message: "⬆️ Update `cda-tum/mqt-core`"
          title: "⬆️ Update `cda-tum/mqt-core`"
          body: |
            This pull request updates the [cda-tum/mqt-core](https://github.com/cda-tum/mqt-core) dependency from cda-tum/mqt-core@${{ steps.get-used-version.outputs.revision }} (version v${{ steps.get-used-version.outputs.version }}) to cda-tum/mqt-core@${{ steps.determine-new-version-and-revision.outputs.new_revision }} (version v${{ steps.determine-new-version-and-revision.outputs.new_version }}).

            **Full Changelog**: https://github.com/cda-tum/mqt-core/compare/${{ steps.get-used-version.outputs.revision }}...${{ steps.determine-new-version-and-revision.outputs.new_revision }}
          branch: "update-mqt-core-${{ steps.determine-new-version-and-revision.outputs.new_revision }}"
          labels: "dependencies,c++"
          base: "main"
