name: üêç ‚Ä¢ Packaging

on:
  workflow_call:
    inputs:
      pure-python:
        description: "Whether this is a pure Python package (or contains compiled extensions)"
        default: false
        type: boolean
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.0"
        type: string
      build-emulated-wheels:
        description: "Whether to build wheels for platforms that require emulation"
        default: true
        type: boolean
      no-local-version:
        description: "Whether to configure setuptools_scm to not use local version identifiers"
        default: false
        type: boolean

jobs:
  build_sdist:
    name: üì¶ SDist
    runs-on: ubuntu-latest
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true
      # workaround for https://github.com/pypa/setuptools-scm/issues/455
      - if: ${{ inputs.no-local-version }}
        name: Disable local version identifiers for setuptools_scm
        run: |
          uv run --no-project --with tomlkit - <<'EOF'
          from pathlib import Path
          import tomlkit

          pyproject_toml_path = Path.cwd() / "pyproject.toml"
          pyproject_toml_txt = pyproject_toml_path.read_text()
          pyproject_toml = tomlkit.loads(pyproject_toml_txt)
          setuptools_scm_section = pyproject_toml["tool"]["setuptools_scm"]
          setuptools_scm_section["local_scheme"] = "no-local-version"
          patched_pyproject_toml_txt = tomlkit.dumps(pyproject_toml)
          pyproject_toml_path.write_text(patched_pyproject_toml_txt)
          EOF
          git diff --color=always
          git update-index --assume-unchanged pyproject.toml
      # build the source distribution
      - name: Build SDist
        run: uv build --sdist
      # check the metadata of the source distribution
      - name: Check metadata
        run: uvx twine check dist/*
      # upload the source distribution as an artifact (adds `dev-` and `test-` prefixes for PRs and continuous deployment, respectively)
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || inputs.no-local-version && 'test-' || '' }}cibw-sdist
          path: dist/*.tar.gz

  build_wheel:
    if: ${{ inputs.pure-python }}
    name: üõû Wheel
    runs-on: ubuntu-latest
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true
      # workaround for https://github.com/pypa/setuptools-scm/issues/455
      - if: ${{ inputs.no-local-version }}
        name: Disable local version identifiers for setuptools_scm
        run: |
          uv run --no-project --with tomlkit - <<'EOF'
          from pathlib import Path
          import tomlkit

          pyproject_toml_path = Path.cwd() / "pyproject.toml"
          pyproject_toml_txt = pyproject_toml_path.read_text()
          pyproject_toml = tomlkit.loads(pyproject_toml_txt)
          setuptools_scm_section = pyproject_toml["tool"]["setuptools_scm"]
          setuptools_scm_section["local_scheme"] = "no-local-version"
          patched_pyproject_toml_txt = tomlkit.dumps(pyproject_toml)
          pyproject_toml_path.write_text(patched_pyproject_toml_txt)
          EOF
          git diff --color=always
          git update-index --assume-unchanged pyproject.toml
      # build the wheel
      - name: Build Wheel
        run: uv build --wheel
      # check the metadata of the wheel
      - name: Check metadata
        run: uvx twine check dist/*
      # upload the wheel as an artifact (adds `dev-` and `test-` prefixes for PRs and continuous deployment, respectively)
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || inputs.no-local-version && 'test-' || '' }}cibw-wheel
          path: dist/*.whl

  build_wheels:
    if: ${{ !inputs.pure-python }}
    name: üé° ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        # build wheels for all supported Python versions on all platforms
        runs-on: [ubuntu-latest, macos-13, macos-14, windows-latest]
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up MSVC development environment (Windows only)
      - uses: ilammy/msvc-dev-cmd@v1
      # optionally set up Z3 (non-Ubuntu only)
      - if: ${{ inputs.setup-z3 && matrix.runs-on != 'ubuntu-latest' }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
      # optionally set up Z3 (Ubuntu only)
      - if: ${{ inputs.setup-z3 && matrix.runs-on == 'ubuntu-latest' }}
        name: Set environment variables for Z3 installation in manylinux image
        run: |
          echo "CIBW_BEFORE_ALL_LINUX=/opt/python/cp311-cp311/bin/pip install z3-solver==${{ inputs.z3-version }}" >> $GITHUB_ENV
      # set up ccache for faster C++ builds
      - if: matrix.runs-on != 'ubuntu-latest'
        name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          windows_compile_environment: msvc
          override_cache_key: wheels-${{ matrix.runs-on }}
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true
      # workaround for https://github.com/pypa/setuptools-scm/issues/455
      - if: ${{ inputs.no-local-version }}
        name: Disable local version identifiers for setuptools_scm
        shell: bash
        run: |
          uv run --no-project --with tomlkit - <<'EOF'
          from pathlib import Path
          import tomlkit

          pyproject_toml_path = Path.cwd() / "pyproject.toml"
          pyproject_toml_txt = pyproject_toml_path.read_text()
          pyproject_toml = tomlkit.loads(pyproject_toml_txt)
          setuptools_scm_section = pyproject_toml["tool"]["setuptools_scm"]
          setuptools_scm_section["local_scheme"] = "no-local-version"
          patched_pyproject_toml_txt = tomlkit.dumps(pyproject_toml)
          pyproject_toml_path.write_text(patched_pyproject_toml_txt)
          EOF
          git diff --color=always
          git update-index --assume-unchanged pyproject.toml
      # run cibuildwheel to build wheels for the specified Python version
      - uses: pypa/cibuildwheel@v2.21
      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash
      # upload the wheels as an artifact (adds `dev-` and `test-` prefixes for PRs and continuous deployment, respectively)
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || inputs.no-local-version && 'test-' || '' }}cibw-wheels-${{ matrix.runs-on }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  build_wheels_emulation:
    if: ${{ !inputs.pure-python && inputs.build-emulated-wheels }}
    name: üé° ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # build wheels for all supported Python versions on all platforms that require emulation
        arch: ["s390x", "ppc64le", "aarch64"]
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      # set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Set environment variables for Z3 installation in manylinux image
        run: |
          echo "CIBW_BEFORE_ALL_LINUX=/opt/python/cp311-cp311/bin/pip install z3-solver==${{ inputs.z3-version }}" >> $GITHUB_ENV
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true
      # workaround for https://github.com/pypa/setuptools-scm/issues/455
      - if: ${{ inputs.no-local-version }}
        name: Disable local version identifiers for setuptools_scm
        run: |
          uv run --no-project --with tomlkit - <<'EOF'
          from pathlib import Path
          import tomlkit

          pyproject_toml_path = Path.cwd() / "pyproject.toml"
          pyproject_toml_txt = pyproject_toml_path.read_text()
          pyproject_toml = tomlkit.loads(pyproject_toml_txt)
          setuptools_scm_section = pyproject_toml["tool"]["setuptools_scm"]
          setuptools_scm_section["local_scheme"] = "no-local-version"
          patched_pyproject_toml_txt = tomlkit.dumps(pyproject_toml)
          pyproject_toml_path.write_text(patched_pyproject_toml_txt)
          EOF
          git diff --color=always
          git update-index --assume-unchanged pyproject.toml
      # run cibuildwheel to build wheels for the specified Python version
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_TEST_SKIP: "cp*"
      # upload the wheels as an artifact (adds `dev-` and `test-` prefixes for PRs and continuous deployment, respectively)
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || inputs.no-local-version && 'test-' || '' }}cibw-wheels-${{ matrix.arch }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
